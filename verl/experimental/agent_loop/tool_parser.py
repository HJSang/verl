# Copyright 2024 Bytedance Ltd. and/or its affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import asyncio
import json
import logging
import os
from abc import ABC, abstractmethod
from typing import Optional

import regex as re
from pydantic import BaseModel

from verl.tools.base_tool import BaseTool
from verl.utils.rollout_trace import rollout_trace_op

try:
    from sglang.srt.function_call.gpt_oss_detector import GptOssDetector
except ImportError:
    GptOssDetector = None

try:
    from sglang.srt.entrypoints.openai.protocol import Tool
except ImportError:
    from sglang.srt.openai_api.protocol import Tool


logger = logging.getLogger(__file__)
logger.setLevel(os.getenv("VERL_LOGGING_LEVEL", "WARN"))


class FunctionCall(BaseModel):
    arguments: str
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """

    name: str
    """The name of the function to call."""


class ToolParser(ABC):
    _registry: dict[str, type["ToolParser"]] = {}

    def __init__(self, tokenizer) -> None:
        self.tokenizer = tokenizer

    @abstractmethod
    async def extract_tool_calls(
        self, responses_ids: list[int], tools: Optional[list[BaseTool]] = None
    ) -> tuple[str, list[FunctionCall]]:
        """Extract tool calls from the responses.

        Args:
            responses_ids (List[int]): The ids of the responses.
            tools (List[BaseTool]): optional, the tools to use.

        Returns:
            Tuple[str, List[FunctionCall]]: Content and extracted tool calls.
        """
        raise NotImplementedError

    @classmethod
    def get_tool_parser(cls, name: str, tokenizer):
        if name not in cls._registry:
            raise ValueError(f"Unknown tool parser: {name}")
        return cls._registry[name](tokenizer)

    @classmethod
    def register(cls, name: str):
        def decorator(subclass: type[ToolParser]) -> type[ToolParser]:
            cls._registry[name] = subclass
            return subclass

        return decorator


@ToolParser.register("hermes")
class HermesToolParser(ToolParser):
    """Adapted from https://github.com/vllm-project/vllm/blob/v0.9.1/vllm/entrypoints/openai/tool_parsers/hermes_tool_parser.py"""

    def __init__(self, tokenizer) -> None:
        super().__init__(tokenizer)

        self.tool_call_start_token: str = "<tool_call>"
        self.tool_call_end_token: str = "</tool_call>"
        self.tool_call_regex = re.compile(r"<tool_call>(.*?)</tool_call>", re.DOTALL)

    @rollout_trace_op
    async def extract_tool_calls(
        self, responses_ids: list[int], tools: Optional[list[BaseTool]] = None
    ) -> tuple[str, list[FunctionCall]]:
        loop = asyncio.get_running_loop()
        text = await loop.run_in_executor(None, self.tokenizer.decode, responses_ids)
        if self.tool_call_start_token not in text or self.tool_call_end_token not in text:
            return text, []

        matches = self.tool_call_regex.findall(text)
        function_calls = []
        for match in matches:
            try:
                function_call = json.loads(match)
                name, arguments = function_call["name"], function_call["arguments"]
                function_calls.append(FunctionCall(name=name, arguments=json.dumps(arguments, ensure_ascii=False)))
            except Exception as e:
                logger.error(f"Failed to decode tool call: {e}")

        # remaing text exclude tool call tokens
        content = self.tool_call_regex.sub("", text)

        return content, function_calls


@ToolParser.register("gpt-oss")
class GptOssToolParser(ToolParser):
    """
    Leverage the gpt-oss detector from sglang to parse the tool calls in the responses.
    """

    def __init__(self, tokenizer) -> None:
        super().__init__(tokenizer)
        assert GptOssDetector is not None, (
            "GptOssDetector is not imported correctly. Please upgrade sglang to the latest version."
        )
        self.gpt_oss_detector = GptOssDetector()

        self.tool_call_start_token = self.gpt_oss_detector.bot_token
        self.tool_call_end_token = self.gpt_oss_detector.eot_token
        self.tool_call_regex = self.gpt_oss_detector.tool_extract_pattern

    @rollout_trace_op
    async def extract_tool_calls(
        self, responses_ids: list[int], tools: Optional[list[BaseTool]]
    ) -> tuple[str, list[FunctionCall]]:
        assert tools is not None, "tools are required to parse responses."
        # convert tools to sgl_tools
        sgl_tools = [Tool.model_validate(tool.get_openai_tool_schema().model_dump()) for tool in tools]
        loop = asyncio.get_running_loop()
        text = await loop.run_in_executor(None, self.tokenizer.decode, responses_ids)
        if not self.gpt_oss_detector.has_tool_call(text):
            return text, []

        parsed_results = self.gpt_oss_detector.detect_and_parse(text, tools=sgl_tools)
        # convert calls to FunctionCall
        function_calls = []
        for call in parsed_results.calls:
            function_calls.append(FunctionCall(name=call.name, arguments=call.parameters))
        return parsed_results.normal_text, function_calls
